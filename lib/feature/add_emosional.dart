import 'package:flutter/material.dart';
import 'package:coach_web/model/emotional_model.dart';
import 'package:coach_web/service/api_service.dart';
import 'package:coach_web/model/player_model.dart';

class AddEmosionalDialog extends StatefulWidget {
  final Function(EmosionalModel) onAdd;

  const AddEmosionalDialog({required this.onAdd, Key? key}) : super(key: key);

  @override
  State<AddEmosionalDialog> createState() => _AddEmosionalDialogState();
}

class _AddEmosionalDialogState extends State<AddEmosionalDialog> {
  final TextEditingController _weekController = TextEditingController();
  String _selectedPosition = 'Anchor';
  String? _selectedPemain;
  String? _disciplineScore;
  String? _motivationScore;
  String? _leadershipScore;
  String? _teamworkScore;
  String? _emotionalControlScore;
  String? _developmentScore;

  final List<String> _positions = ['Anchor', 'Pivot', 'Flank', 'Kiper'];
  final List<String> _nilaiOptions = ['Kurang', 'Cukup', 'Baik', 'Sangat Baik'];
  List<PlayerModel> _players = [];

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          _buildDropdown('Posisi', _positions, _selectedPosition, (value) {
            setState(() {
              _selectedPosition = value!;
              _fetchPlayersByPosition(_selectedPosition);
            });
          }),
          _buildDropdown(
              'Nama Pemain',
              _players.map((player) => player.name).toList(),
              _selectedPemain, (value) {
            setState(() {
              _selectedPemain = value;
            });
          }),
          _buildTextField('Minggu Ke', _weekController),
          _buildDropdown('Kedisiplinan', _nilaiOptions, _disciplineScore,
              (value) {
            setState(() {
              _disciplineScore = value!;
            });
          }),
          _buildDropdown(
              'Motivasi dan Semangat', _nilaiOptions, _motivationScore,
              (value) {
            setState(() {
              _motivationScore = value!;
            });
          }),
          _buildDropdown('Leadership', _nilaiOptions, _leadershipScore,
              (value) {
            setState(() {
              _leadershipScore = value!;
            });
          }),
          _buildDropdown('Teamwork', _nilaiOptions, _teamworkScore, (value) {
            setState(() {
              _teamworkScore = value!;
            });
          }),
          _buildDropdown('Kontrol Emosi', _nilaiOptions, _emotionalControlScore,
              (value) {
            setState(() {
              _emotionalControlScore = value!;
            });
          }),
          _buildDropdown(
              'Perkembangan Pemain', _nilaiOptions, _developmentScore, (value) {
            setState(() {
              _developmentScore = value!;
            });
          }),
          SizedBox(height: 20),
          ElevatedButton(
            onPressed: _submitData,
            child: const Text('Tambah'),
          ),
        ],
      ),
    );
  }

  void _submitData() {
    if (_selectedPemain == null ||
        _weekController.text.isEmpty ||
        _disciplineScore == null ||
        _motivationScore == null ||
        _leadershipScore == null ||
        _teamworkScore == null ||
        _emotionalControlScore == null ||
        _developmentScore == null) {
      _showAlertDialog("Error", "Silakan isi semua data.");
      return;
    }

    EmosionalModel newEmosional = EmosionalModel(
      id: '', // This should be generated by the backend
      position: _selectedPosition,
      name: _selectedPemain ?? '',
      assessmentWeek: _weekController.text,
      disciplineScore: _disciplineScore ?? '',
      motivationScore: _motivationScore ?? '',
      leadershipScore: _leadershipScore ?? '',
      teamworkScore: _teamworkScore ?? '',
      emotionalControlScore: _emotionalControlScore ?? '',
      developmentScore: _developmentScore ?? '',
      v: 0,
    );

    ApiService().addEmosional(newEmosional).then((success) {
      if (success) {
        widget.onAdd(newEmosional);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text("Berhasil ditambahkan."),
            duration: Duration(seconds: 2),
          ),
        );
        Navigator.of(context).pop();
      } else {
        _showAlertDialog("Error", "Gagal menambahkan data.");
      }
    });
  }

  void _showAlertDialog(String title, String message) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(title),
          content: Text(message),
          actions: <Widget>[
            TextButton(
              child: Text("OK"),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }

  Widget _buildDropdown(String label, List<String> items, String? selectedItem,
      ValueChanged<String?> onChanged) {
    return DropdownButtonFormField<String>(
      decoration: InputDecoration(labelText: label),
      value: selectedItem != null && items.contains(selectedItem)
          ? selectedItem
          : null,
      items: items.map((String value) {
        return DropdownMenuItem<String>(
          value: value,
          child: Text(value),
        );
      }).toList(),
      onChanged: onChanged,
    );
  }

  Widget _buildTextField(String label, TextEditingController controller) {
    return TextFormField(
      controller: controller,
      decoration: InputDecoration(labelText: label),
    );
  }

  Future<void> _fetchPlayersByPosition(String position) async {
    try {
      final players = await ApiService().fetchPlayersByPosition(position);
      setState(() {
        _players = players;
      });
    } catch (e) {
      print('Error fetching players: $e');
    }
  }
}
